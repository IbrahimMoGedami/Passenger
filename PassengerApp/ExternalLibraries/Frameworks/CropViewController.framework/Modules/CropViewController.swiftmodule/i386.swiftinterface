// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.2 (swiftlang-1100.0.278 clang-1100.0.33.9)
// swift-module-flags: -target i386-apple-ios8.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CropViewController
@_exported import CropViewController
import Swift
public typealias CropViewControllerAspectRatioPreset = CropViewController.TOCropViewControllerAspectRatioPreset
public typealias CropViewControllerToolbarPosition = CropViewController.TOCropViewControllerToolbarPosition
public typealias CropViewCroppingStyle = CropViewController.TOCropViewCroppingStyle
@objc public protocol CropViewControllerDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func cropViewController(_ cropViewController: CropViewController.CropViewController, didCropImageToRect rect: CoreGraphics.CGRect, angle: Swift.Int)
  @objc optional func cropViewController(_ cropViewController: CropViewController.CropViewController, didCropToImage image: UIKit.UIImage, withRect cropRect: CoreGraphics.CGRect, angle: Swift.Int)
  @objc optional func cropViewController(_ cropViewController: CropViewController.CropViewController, didCropToCircularImage image: UIKit.UIImage, withRect cropRect: CoreGraphics.CGRect, angle: Swift.Int)
  @objc optional func cropViewController(_ cropViewController: CropViewController.CropViewController, didFinishCancelled cancelled: Swift.Bool)
}
@objc open class CropViewController : UIKit.UIViewController, CropViewController.TOCropViewControllerDelegate {
  public var image: UIKit.UIImage {
    get
  }
  weak public var delegate: CropViewController.CropViewControllerDelegate? {
    get
    set
  }
  @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  public var showActivitySheetOnDone: Swift.Bool {
    get
    set
  }
  public var imageCropFrame: CoreGraphics.CGRect {
    get
    set
  }
  public var angle: Swift.Int {
    get
    set
  }
  public var croppingStyle: CropViewController.CropViewCroppingStyle {
    get
  }
  public var aspectRatioPreset: CropViewController.CropViewControllerAspectRatioPreset {
    get
    set
  }
  public var customAspectRatio: CoreGraphics.CGSize {
    get
    set
  }
  public var titleLabel: UIKit.UILabel? {
    get
  }
  public var aspectRatioLockEnabled: Swift.Bool {
    get
    set
  }
  public var aspectRatioLockDimensionSwapEnabled: Swift.Bool {
    get
    set
  }
  public var resetAspectRatioEnabled: Swift.Bool {
    get
    set
  }
  public var toolbarPosition: CropViewController.CropViewControllerToolbarPosition {
    get
    set
  }
  public var rotateClockwiseButtonHidden: Swift.Bool {
    get
    set
  }
  public var rotateButtonsHidden: Swift.Bool {
    get
    set
  }
  public var resetButtonHidden: Swift.Bool {
    get
    set
  }
  public var aspectRatioPickerButtonHidden: Swift.Bool {
    get
    set
  }
  public var activityItems: [Any]? {
    get
    set
  }
  public var applicationActivities: [UIKit.UIActivity]? {
    get
    set
  }
  public var excludedActivityTypes: [UIKit.UIActivity.ActivityType]? {
    get
    set
  }
  public var onDidFinishCancelled: ((Swift.Bool) -> (Swift.Void))? {
    get
    set
  }
  public var onDidCropImageToRect: ((CoreGraphics.CGRect, Swift.Int) -> (Swift.Void))? {
    get
    set
  }
  public var onDidCropToRect: ((UIKit.UIImage, CoreGraphics.CGRect, ObjectiveC.NSInteger) -> (Swift.Void))? {
    get
    set
  }
  public var onDidCropToCircleImage: ((UIKit.UIImage, CoreGraphics.CGRect, ObjectiveC.NSInteger) -> (Swift.Void))? {
    get
    set
  }
  public var cropView: CropViewController.TOCropView {
    get
  }
  public var toolbar: CropViewController.TOCropToolbar {
    get
  }
  public var hidesNavigationBar: Swift.Bool {
    get
    set
  }
  public var doneButtonTitle: Swift.String! {
    get
    set
  }
  public var cancelButtonTitle: Swift.String! {
    get
    set
  }
  @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic open var childForStatusBarHidden: UIKit.UIViewController? {
    @objc get
  }
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic open var preferredScreenEdgesDeferringSystemGestures: UIKit.UIRectEdge {
    @objc get
  }
  public init(image: UIKit.UIImage)
  public init(croppingStyle: CropViewController.CropViewCroppingStyle, image: UIKit.UIImage)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  public func resetCropViewLayout()
  public func setAspectRatioPreset(_ aspectRatio: CropViewController.CropViewControllerAspectRatioPreset, animated: Swift.Bool)
  public func presentAnimatedFrom(_ viewController: UIKit.UIViewController, fromView view: UIKit.UIView?, fromFrame frame: CoreGraphics.CGRect, setup: (() -> (Swift.Void))?, completion: (() -> (Swift.Void))?)
  public func presentAnimatedFrom(_ viewController: UIKit.UIViewController, fromImage image: UIKit.UIImage?, fromView: UIKit.UIView?, fromFrame: CoreGraphics.CGRect, angle: Swift.Int, toImageFrame toFrame: CoreGraphics.CGRect, setup: (() -> (Swift.Void))?, completion: (() -> (Swift.Void))?)
  public func dismissAnimatedFrom(_ viewController: UIKit.UIViewController, toView: UIKit.UIView?, toFrame: CoreGraphics.CGRect, setup: (() -> (Swift.Void))?, completion: (() -> (Swift.Void))?)
  public func dismissAnimatedFrom(_ viewController: UIKit.UIViewController, withCroppedImage croppedImage: UIKit.UIImage?, toView: UIKit.UIView?, toFrame: CoreGraphics.CGRect, setup: (() -> (Swift.Void))?, completion: (() -> (Swift.Void))?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
